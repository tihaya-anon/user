openapi: 3.0.0
info:
  title: User Management BFF API
  version: 1.0.0
servers:
  - url: http://localhost:8080
security:
  - bearerAuth: []
tags:
- name: Auth
  description: Authentication and session management
- name: User
  description: User lifecycle management
- name: Credential
  description: User credential management
- name: Permission
  description: User permission management
- name: Security
  description: User security management
components:
  schemas:
    Empty:
      type: object
    UserIdParam:
      type: integer
      format: int64
    # Auth-related
    UserLoginRequest:
      type: object
      properties:
        type:
          type: string
          enum:
            - PASSWORD
            - EMAIL_CODE
            - GOOGLE_2FA
            - OAUTH
        identifier:
          type: string
        secret:
          type: string
        device_info:
          type: string
      required:
        - type
        - identifier
        - secret
    AuthSessionResponse:
      type: object
      properties:
        session_id:
          type: integer
          format: int64
        token:
          type: string
        device_info:
          type: string
        ip_address:
          type: string
        expires_at:
          type: string
          format: date-time
        is_valid:
          type: boolean
    # User-related
    UserCreateRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - ADMIN
            - TRADER
            - USER
        hashed_pwd:
          type: string
      required:
        - username
        - email
        - role
        - hashed_pwd
    UserCreateResponse:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
    UserProfileResponse:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - TRADER
            - USER
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - TRADER
            - USER
        hashed_pwd:
          type: string
    UserUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
    # Credential-related
    CredentialAddRequest:
      type: object
      properties:
        type:
          type: string
          enum:
            - PASSWORD
            - EMAIL_CODE
            - GOOGLE_2FA
            - OAUTH
        identifier:
          type: string
        secret:
          type: string
      required:
        - type
        - identifier
        - secret
    CredentialAddResponse:
      type: object
      properties:
        credential_id:
          type: integer
          format: int64
    CredentialListResponse:
      type: object
      properties:
        credentials:
          type: array
          items:
            type: object
            properties:
              credential_id:
                type: integer
                format: int64
              type:
                type: string
                enum:
                  - PASSWORD
                  - EMAIL_CODE
                  - GOOGLE_2FA
                  - OAUTH
              identifier:
                type: string
              is_active:
                type: boolean
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
    # Permission-related
    PermissionSetRequest:
      type: object
      properties:
        permission:
          type: string
        granted:
          type: boolean
        granted_by:
          type: integer
          format: int64
        comment:
          type: string
      required:
        - permission
        - granted
        - granted_by
        - comment
    PermissionListResponse:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: object
            properties:
              permission:
                type: string
              granted:
                type: boolean
              granted_by:
                type: integer
                format: int64
              granted_at:
                type: string
                format: date-time
              comment:
                type: string
    # Security-related
    SecurityCreateRequest:
      type: object
      properties:
        is2FAEnabled:
          type: boolean
        kycStatus:
          type: string
          enum:
            - UNVERIFIED
            - PENDING
            - VERIFIED
        riskLevel:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
        withdrawalWhitelist:
          type: array
          items:
            type: string
      required:
        - is2FAEnabled
        - kycStatus
        - riskLevel
        - withdrawalWhitelist
    SecurityUpdateRequest:
      type: object
      properties:
        is2FAEnabled:
          type: boolean
        kycStatus:
          type: string
          enum:
            - UNVERIFIED
            - PENDING
            - VERIFIED
        riskLevel:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
        withdrawalWhitelist:
          type: array
          items:
            type: string
      required:
        - is2FAEnabled
        - kycStatus
        - riskLevel
        - withdrawalWhitelist
    SecuritySettingResponse:
      type: object
      properties:
        is2FAEnabled:
          type: boolean
        kycStatus:
          type: string
          enum:
            - UNVERIFIED
            - PENDING
            - VERIFIED
        riskLevel:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
        withdrawalWhitelist:
          type: array
          items:
            type: string
        updatedAt:
          type: string
          format: date-time
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /user/login:
    post:
      summary: Authenticate user and create a new session
      tags:
      - Auth
      operationId: loginUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSessionResponse'
        '400':
          description: Invalid request data
        '401':
          description: Authentication failed
  /user/logout:
    post:
      summary: Invalidate an existing session
      tags:
      - Auth
      operationId: logoutUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '401':
          description: Session invalid or expired
        '404':
          description: Session not found
  /user:
    post:
      summary: Create a new user account
      tags:
      - User
      operationId: registerUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '400':
          description: Invalid user data
        '409':
          description: Username or email already exists
  /user/{userId}:
    get:
      summary: Get user profile information by ID
      tags:
      - User
      operationId: getUserProfile
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '404':
          description: User not found
        '400':
          description: Invalid user ID format
    put:
      summary: Update user profile information
      tags:
      - User
      operationId: updateUserProfile
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateResponse'
        '404':
          description: User not found
        '400':
          description: Invalid user ID or data
  /user/{userId}/credentials:
    post:
      summary: Add a new credential for a user
      tags:
      - Credential
      operationId: addCredential
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialAddRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialAddResponse'
        '404':
          description: User not found
        '400':
          description: Invalid user ID or credential data
    get:
      summary: Get all credentials for a user
      tags:
      - Credential
      operationId: getCredentials
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialListResponse'
        '404':
          description: User not found
        '400':
          description: Invalid user ID
  /user/{userId}/permissions:
    get:
      summary: Get all permissions for a user
      tags:
      - Permission
      operationId: getUserPermissions
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionListResponse'
        '404':
          description: User not found
        '400':
          description: Invalid user ID
    post:
      summary: Set permissions for a user
      tags:
      - Permission
      operationId: setUserPermissions
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionSetRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '404':
          description: User not found
        '400':
          description: Invalid user ID or permission data
  /user/{userId}/security:
    get:
      summary: Get security settings for a user
      tags:
      - Security
      operationId: getUserSecurity
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecuritySettingResponse'
        '404':
          description: User or security settings not found
        '400':
          description: Invalid user ID
    post:
      summary: Create security settings for a user
      tags:
      - Security
      operationId: createUserSecurity
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityCreateRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '409':
          description: Security settings already exist
        '404':
          description: User not found
        '400':
          description: Invalid user ID or security data
    put:
      summary: Update security settings for a user
      tags:
      - Security
      operationId: updateUserSecurity
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityUpdateRequest'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '404':
          description: User or security settings not found
        '400':
          description: Invalid user ID or security data

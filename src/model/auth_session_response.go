/*
User Management BFF API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
	"time"
)

// checks if the AuthSessionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthSessionResponse{}

// AuthSessionResponse struct for AuthSessionResponse
type AuthSessionResponse struct {
	SessionId *int64 `json:"session_id,omitempty"`
	Token *string `json:"token,omitempty"`
	DeviceInfo *string `json:"device_info,omitempty"`
	IpAddress *string `json:"ip_address,omitempty"`
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	IsValid *bool `json:"is_valid,omitempty"`
}

// NewAuthSessionResponse instantiates a new AuthSessionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthSessionResponse() *AuthSessionResponse {
	this := AuthSessionResponse{}
	return &this
}

// NewAuthSessionResponseWithDefaults instantiates a new AuthSessionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthSessionResponseWithDefaults() *AuthSessionResponse {
	this := AuthSessionResponse{}
	return &this
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *AuthSessionResponse) GetSessionId() int64 {
	if o == nil || IsNil(o.SessionId) {
		var ret int64
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSessionResponse) GetSessionIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *AuthSessionResponse) HasSessionId() bool {
	if o != nil && !IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given int64 and assigns it to the SessionId field.
func (o *AuthSessionResponse) SetSessionId(v int64) {
	o.SessionId = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *AuthSessionResponse) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSessionResponse) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *AuthSessionResponse) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *AuthSessionResponse) SetToken(v string) {
	o.Token = &v
}

// GetDeviceInfo returns the DeviceInfo field value if set, zero value otherwise.
func (o *AuthSessionResponse) GetDeviceInfo() string {
	if o == nil || IsNil(o.DeviceInfo) {
		var ret string
		return ret
	}
	return *o.DeviceInfo
}

// GetDeviceInfoOk returns a tuple with the DeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSessionResponse) GetDeviceInfoOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceInfo) {
		return nil, false
	}
	return o.DeviceInfo, true
}

// HasDeviceInfo returns a boolean if a field has been set.
func (o *AuthSessionResponse) HasDeviceInfo() bool {
	if o != nil && !IsNil(o.DeviceInfo) {
		return true
	}

	return false
}

// SetDeviceInfo gets a reference to the given string and assigns it to the DeviceInfo field.
func (o *AuthSessionResponse) SetDeviceInfo(v string) {
	o.DeviceInfo = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *AuthSessionResponse) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSessionResponse) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *AuthSessionResponse) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *AuthSessionResponse) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *AuthSessionResponse) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSessionResponse) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *AuthSessionResponse) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *AuthSessionResponse) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetIsValid returns the IsValid field value if set, zero value otherwise.
func (o *AuthSessionResponse) GetIsValid() bool {
	if o == nil || IsNil(o.IsValid) {
		var ret bool
		return ret
	}
	return *o.IsValid
}

// GetIsValidOk returns a tuple with the IsValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthSessionResponse) GetIsValidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsValid) {
		return nil, false
	}
	return o.IsValid, true
}

// HasIsValid returns a boolean if a field has been set.
func (o *AuthSessionResponse) HasIsValid() bool {
	if o != nil && !IsNil(o.IsValid) {
		return true
	}

	return false
}

// SetIsValid gets a reference to the given bool and assigns it to the IsValid field.
func (o *AuthSessionResponse) SetIsValid(v bool) {
	o.IsValid = &v
}

func (o AuthSessionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthSessionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SessionId) {
		toSerialize["session_id"] = o.SessionId
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.DeviceInfo) {
		toSerialize["device_info"] = o.DeviceInfo
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.IsValid) {
		toSerialize["is_valid"] = o.IsValid
	}
	return toSerialize, nil
}

type NullableAuthSessionResponse struct {
	value *AuthSessionResponse
	isSet bool
}

func (v NullableAuthSessionResponse) Get() *AuthSessionResponse {
	return v.value
}

func (v *NullableAuthSessionResponse) Set(val *AuthSessionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthSessionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthSessionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthSessionResponse(val *AuthSessionResponse) *NullableAuthSessionResponse {
	return &NullableAuthSessionResponse{value: val, isSet: true}
}

func (v NullableAuthSessionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthSessionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



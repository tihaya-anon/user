// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: login_audit_log.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginAuditServiceClient is the client API for LoginAuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginAuditServiceClient interface {
	AddLoginAuditLog(ctx context.Context, in *AddLoginAuditLogRequest, opts ...grpc.CallOption) (*AddLoginAuditLogResponse, error)
	ListLoginAuditLogs(ctx context.Context, in *ListLoginAuditLogsRequest, opts ...grpc.CallOption) (*ListLoginAuditLogsResponse, error)
}

type loginAuditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginAuditServiceClient(cc grpc.ClientConnInterface) LoginAuditServiceClient {
	return &loginAuditServiceClient{cc}
}

func (c *loginAuditServiceClient) AddLoginAuditLog(ctx context.Context, in *AddLoginAuditLogRequest, opts ...grpc.CallOption) (*AddLoginAuditLogResponse, error) {
	out := new(AddLoginAuditLogResponse)
	err := c.cc.Invoke(ctx, "/login_audit.LoginAuditService/AddLoginAuditLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginAuditServiceClient) ListLoginAuditLogs(ctx context.Context, in *ListLoginAuditLogsRequest, opts ...grpc.CallOption) (*ListLoginAuditLogsResponse, error) {
	out := new(ListLoginAuditLogsResponse)
	err := c.cc.Invoke(ctx, "/login_audit.LoginAuditService/ListLoginAuditLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginAuditServiceServer is the server API for LoginAuditService service.
// All implementations should embed UnimplementedLoginAuditServiceServer
// for forward compatibility
type LoginAuditServiceServer interface {
	AddLoginAuditLog(context.Context, *AddLoginAuditLogRequest) (*AddLoginAuditLogResponse, error)
	ListLoginAuditLogs(context.Context, *ListLoginAuditLogsRequest) (*ListLoginAuditLogsResponse, error)
}

// UnimplementedLoginAuditServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLoginAuditServiceServer struct {
}

func (UnimplementedLoginAuditServiceServer) AddLoginAuditLog(context.Context, *AddLoginAuditLogRequest) (*AddLoginAuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLoginAuditLog not implemented")
}
func (UnimplementedLoginAuditServiceServer) ListLoginAuditLogs(context.Context, *ListLoginAuditLogsRequest) (*ListLoginAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginAuditLogs not implemented")
}

// UnsafeLoginAuditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginAuditServiceServer will
// result in compilation errors.
type UnsafeLoginAuditServiceServer interface {
	mustEmbedUnimplementedLoginAuditServiceServer()
}

func RegisterLoginAuditServiceServer(s grpc.ServiceRegistrar, srv LoginAuditServiceServer) {
	s.RegisterService(&LoginAuditService_ServiceDesc, srv)
}

func _LoginAuditService_AddLoginAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLoginAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginAuditServiceServer).AddLoginAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login_audit.LoginAuditService/AddLoginAuditLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginAuditServiceServer).AddLoginAuditLog(ctx, req.(*AddLoginAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginAuditService_ListLoginAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginAuditServiceServer).ListLoginAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login_audit.LoginAuditService/ListLoginAuditLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginAuditServiceServer).ListLoginAuditLogs(ctx, req.(*ListLoginAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginAuditService_ServiceDesc is the grpc.ServiceDesc for LoginAuditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginAuditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "login_audit.LoginAuditService",
	HandlerType: (*LoginAuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLoginAuditLog",
			Handler:    _LoginAuditService_AddLoginAuditLog_Handler,
		},
		{
			MethodName: "ListLoginAuditLogs",
			Handler:    _LoginAuditService_ListLoginAuditLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "login_audit_log.proto",
}

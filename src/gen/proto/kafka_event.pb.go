// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: kafka_event.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Priority int32

const (
	Priority_PRIORITY_UNSPECIFIED Priority = 0
	Priority_HIGH                 Priority = 1
	Priority_MEDIUM               Priority = 2
	Priority_LOW                  Priority = 3
)

// Enum value maps for Priority.
var (
	Priority_name = map[int32]string{
		0: "PRIORITY_UNSPECIFIED",
		1: "HIGH",
		2: "MEDIUM",
		3: "LOW",
	}
	Priority_value = map[string]int32{
		"PRIORITY_UNSPECIFIED": 0,
		"HIGH":                 1,
		"MEDIUM":               2,
		"LOW":                  3,
	}
)

func (x Priority) Enum() *Priority {
	p := new(Priority)
	*p = x
	return p
}

func (x Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_kafka_event_proto_enumTypes[0].Descriptor()
}

func (Priority) Type() protoreflect.EnumType {
	return &file_kafka_event_proto_enumTypes[0]
}

func (x Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Priority.Descriptor instead.
func (Priority) EnumDescriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{0}
}

type DeliveryMode int32

const (
	DeliveryMode_DELIVERY_UNSPECIFIED DeliveryMode = 0
	DeliveryMode_PUSH                 DeliveryMode = 1
	DeliveryMode_PULL                 DeliveryMode = 2
)

// Enum value maps for DeliveryMode.
var (
	DeliveryMode_name = map[int32]string{
		0: "DELIVERY_UNSPECIFIED",
		1: "PUSH",
		2: "PULL",
	}
	DeliveryMode_value = map[string]int32{
		"DELIVERY_UNSPECIFIED": 0,
		"PUSH":                 1,
		"PULL":                 2,
	}
)

func (x DeliveryMode) Enum() *DeliveryMode {
	p := new(DeliveryMode)
	*p = x
	return p
}

func (x DeliveryMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryMode) Descriptor() protoreflect.EnumDescriptor {
	return file_kafka_event_proto_enumTypes[1].Descriptor()
}

func (DeliveryMode) Type() protoreflect.EnumType {
	return &file_kafka_event_proto_enumTypes[1]
}

func (x DeliveryMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryMode.Descriptor instead.
func (DeliveryMode) EnumDescriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{1}
}

type TriggerMode int32

const (
	TriggerMode_TRIGGER_UNSPECIFIED TriggerMode = 0
	TriggerMode_ASYNC               TriggerMode = 1
	TriggerMode_SYNC                TriggerMode = 2
)

// Enum value maps for TriggerMode.
var (
	TriggerMode_name = map[int32]string{
		0: "TRIGGER_UNSPECIFIED",
		1: "ASYNC",
		2: "SYNC",
	}
	TriggerMode_value = map[string]int32{
		"TRIGGER_UNSPECIFIED": 0,
		"ASYNC":               1,
		"SYNC":                2,
	}
)

func (x TriggerMode) Enum() *TriggerMode {
	p := new(TriggerMode)
	*p = x
	return p
}

func (x TriggerMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerMode) Descriptor() protoreflect.EnumDescriptor {
	return file_kafka_event_proto_enumTypes[2].Descriptor()
}

func (TriggerMode) Type() protoreflect.EnumType {
	return &file_kafka_event_proto_enumTypes[2]
}

func (x TriggerMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerMode.Descriptor instead.
func (TriggerMode) EnumDescriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{2}
}

type EventStatus int32

const (
	EventStatus_STATUS_UNSPECIFIED EventStatus = 0 // 未指定状态
	EventStatus_PENDING            EventStatus = 1 // 待处理
	EventStatus_PROCESSED_SUCCESS  EventStatus = 2 // 处理成功
	EventStatus_PROCESSED_FAILED   EventStatus = 3 // 处理失败（可重试）
	EventStatus_FINAL_FAILED       EventStatus = 4 // 最终失败（放弃重试）
	EventStatus_CANCELLED          EventStatus = 5 // 主动取消（不处理，非失败）
)

// Enum value maps for EventStatus.
var (
	EventStatus_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "PROCESSED_SUCCESS",
		3: "PROCESSED_FAILED",
		4: "FINAL_FAILED",
		5: "CANCELLED",
	}
	EventStatus_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"PROCESSED_SUCCESS":  2,
		"PROCESSED_FAILED":   3,
		"FINAL_FAILED":       4,
		"CANCELLED":          5,
	}
)

func (x EventStatus) Enum() *EventStatus {
	p := new(EventStatus)
	*p = x
	return p
}

func (x EventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kafka_event_proto_enumTypes[3].Descriptor()
}

func (EventStatus) Type() protoreflect.EnumType {
	return &file_kafka_event_proto_enumTypes[3]
}

func (x EventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventStatus.Descriptor instead.
func (EventStatus) EnumDescriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{3}
}

type FailureDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    string                 `protobuf:"bytes,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	OccurredAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
}

func (x *FailureDetail) Reset() {
	*x = FailureDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureDetail) ProtoMessage() {}

func (x *FailureDetail) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureDetail.ProtoReflect.Descriptor instead.
func (*FailureDetail) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{0}
}

func (x *FailureDetail) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *FailureDetail) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *FailureDetail) GetOccurredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OccurredAt
	}
	return nil
}

type KafkaEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId              int64                  `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                                                                          // 主键 ID
	TopicName            string                 `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`                                                                     // Kafka topic 名称
	EventType            string                 `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`                                                                     // 业务事件类型
	Priority             Priority               `protobuf:"varint,4,opt,name=priority,proto3,enum=kafka.Priority" json:"priority,omitempty"`                                                                   // 优先级
	Payload              []byte                 `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`                                                                                          // 消息内容
	SchemaSubject        string                 `protobuf:"bytes,18,opt,name=schema_subject,json=schemaSubject,proto3" json:"schema_subject,omitempty"`                                                        // SR 主题名称
	SchemaId             int64                  `protobuf:"varint,19,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`                                                                      // SR id
	DeliveryMode         DeliveryMode           `protobuf:"varint,6,opt,name=delivery_mode,json=deliveryMode,proto3,enum=kafka.DeliveryMode" json:"delivery_mode,omitempty"`                                   // 投递模式
	TriggerModeRequested TriggerMode            `protobuf:"varint,7,opt,name=trigger_mode_requested,json=triggerModeRequested,proto3,enum=kafka.TriggerMode" json:"trigger_mode_requested,omitempty"`          // 期望触发模式
	TriggerModeEffective TriggerMode            `protobuf:"varint,17,opt,name=trigger_mode_effective,json=triggerModeEffective,proto3,enum=kafka.TriggerMode" json:"trigger_mode_effective,omitempty"`         // 实际触发模式
	Status               EventStatus            `protobuf:"varint,8,opt,name=status,proto3,enum=kafka.EventStatus" json:"status,omitempty"`                                                                    // 当前状态
	RetryCnt             int32                  `protobuf:"varint,9,opt,name=retry_cnt,json=retryCnt,proto3" json:"retry_cnt,omitempty"`                                                                       // 重试次数
	IdempotencyKey       string                 `protobuf:"bytes,10,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`                                                     // 幂等键
	CorrelationId        string                 `protobuf:"bytes,11,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`                                                        // 请求链路标识
	Headers              map[string]string      `protobuf:"bytes,12,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 可选的 Kafka headers
	ErrorCode            string                 `protobuf:"bytes,13,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`                                                                    // 错误码
	ErrorMessage         string                 `protobuf:"bytes,14,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                                           // 错误信息
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                                    // 创建时间
	ProcessedAt          *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`                                                              // 处理时间
}

func (x *KafkaEnvelope) Reset() {
	*x = KafkaEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaEnvelope) ProtoMessage() {}

func (x *KafkaEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaEnvelope.ProtoReflect.Descriptor instead.
func (*KafkaEnvelope) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{1}
}

func (x *KafkaEnvelope) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *KafkaEnvelope) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *KafkaEnvelope) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *KafkaEnvelope) GetPriority() Priority {
	if x != nil {
		return x.Priority
	}
	return Priority_PRIORITY_UNSPECIFIED
}

func (x *KafkaEnvelope) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *KafkaEnvelope) GetSchemaSubject() string {
	if x != nil {
		return x.SchemaSubject
	}
	return ""
}

func (x *KafkaEnvelope) GetSchemaId() int64 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

func (x *KafkaEnvelope) GetDeliveryMode() DeliveryMode {
	if x != nil {
		return x.DeliveryMode
	}
	return DeliveryMode_DELIVERY_UNSPECIFIED
}

func (x *KafkaEnvelope) GetTriggerModeRequested() TriggerMode {
	if x != nil {
		return x.TriggerModeRequested
	}
	return TriggerMode_TRIGGER_UNSPECIFIED
}

func (x *KafkaEnvelope) GetTriggerModeEffective() TriggerMode {
	if x != nil {
		return x.TriggerModeEffective
	}
	return TriggerMode_TRIGGER_UNSPECIFIED
}

func (x *KafkaEnvelope) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_STATUS_UNSPECIFIED
}

func (x *KafkaEnvelope) GetRetryCnt() int32 {
	if x != nil {
		return x.RetryCnt
	}
	return 0
}

func (x *KafkaEnvelope) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *KafkaEnvelope) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *KafkaEnvelope) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *KafkaEnvelope) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *KafkaEnvelope) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *KafkaEnvelope) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *KafkaEnvelope) GetProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedAt
	}
	return nil
}

type SubmitEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelope *KafkaEnvelope `protobuf:"bytes,1,opt,name=envelope,proto3" json:"envelope,omitempty"`
}

func (x *SubmitEventRequest) Reset() {
	*x = SubmitEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventRequest) ProtoMessage() {}

func (x *SubmitEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventRequest.ProtoReflect.Descriptor instead.
func (*SubmitEventRequest) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitEventRequest) GetEnvelope() *KafkaEnvelope {
	if x != nil {
		return x.Envelope
	}
	return nil
}

type SubmitEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId              int64       `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Status               EventStatus `protobuf:"varint,2,opt,name=status,proto3,enum=kafka.EventStatus" json:"status,omitempty"`
	TriggerModeEffective TriggerMode `protobuf:"varint,3,opt,name=trigger_mode_effective,json=triggerModeEffective,proto3,enum=kafka.TriggerMode" json:"trigger_mode_effective,omitempty"`
}

func (x *SubmitEventResponse) Reset() {
	*x = SubmitEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventResponse) ProtoMessage() {}

func (x *SubmitEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventResponse.ProtoReflect.Descriptor instead.
func (*SubmitEventResponse) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitEventResponse) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *SubmitEventResponse) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_STATUS_UNSPECIFIED
}

func (x *SubmitEventResponse) GetTriggerModeEffective() TriggerMode {
	if x != nil {
		return x.TriggerModeEffective
	}
	return TriggerMode_TRIGGER_UNSPECIFIED
}

type AcknowledgeEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *AcknowledgeEventRequest) Reset() {
	*x = AcknowledgeEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeEventRequest) ProtoMessage() {}

func (x *AcknowledgeEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeEventRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeEventRequest) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{4}
}

func (x *AcknowledgeEventRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

type AcknowledgeEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AcknowledgeEventResponse) Reset() {
	*x = AcknowledgeEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeEventResponse) ProtoMessage() {}

func (x *AcknowledgeEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeEventResponse.ProtoReflect.Descriptor instead.
func (*AcknowledgeEventResponse) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{5}
}

func (x *AcknowledgeEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type FailEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId int64          `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Failure *FailureDetail `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *FailEventRequest) Reset() {
	*x = FailEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailEventRequest) ProtoMessage() {}

func (x *FailEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailEventRequest.ProtoReflect.Descriptor instead.
func (*FailEventRequest) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{6}
}

func (x *FailEventRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *FailEventRequest) GetFailure() *FailureDetail {
	if x != nil {
		return x.Failure
	}
	return nil
}

type FailEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *FailEventResponse) Reset() {
	*x = FailEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailEventResponse) ProtoMessage() {}

func (x *FailEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailEventResponse.ProtoReflect.Descriptor instead.
func (*FailEventResponse) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{7}
}

func (x *FailEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// ===== 标记失败（不可重试） =====
type MarkFinalFailedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId int64          `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Failure *FailureDetail `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *MarkFinalFailedRequest) Reset() {
	*x = MarkFinalFailedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkFinalFailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkFinalFailedRequest) ProtoMessage() {}

func (x *MarkFinalFailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkFinalFailedRequest.ProtoReflect.Descriptor instead.
func (*MarkFinalFailedRequest) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{8}
}

func (x *MarkFinalFailedRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *MarkFinalFailedRequest) GetFailure() *FailureDetail {
	if x != nil {
		return x.Failure
	}
	return nil
}

type MarkFinalFailedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MarkFinalFailedResponse) Reset() {
	*x = MarkFinalFailedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkFinalFailedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkFinalFailedResponse) ProtoMessage() {}

func (x *MarkFinalFailedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkFinalFailedResponse.ProtoReflect.Descriptor instead.
func (*MarkFinalFailedResponse) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{9}
}

func (x *MarkFinalFailedResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// ==== 取消处理 ====
type CancelEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId     int64                  `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Reason      string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`                              // 取消理由（如“超时放弃”、“业务撤销”）
	CancelledAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=cancelled_at,json=cancelledAt,proto3" json:"cancelled_at,omitempty"` // 取消时间（可选）
}

func (x *CancelEventRequest) Reset() {
	*x = CancelEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelEventRequest) ProtoMessage() {}

func (x *CancelEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelEventRequest.ProtoReflect.Descriptor instead.
func (*CancelEventRequest) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{10}
}

func (x *CancelEventRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *CancelEventRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CancelEventRequest) GetCancelledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelledAt
	}
	return nil
}

type CancelEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CancelEventResponse) Reset() {
	*x = CancelEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelEventResponse) ProtoMessage() {}

func (x *CancelEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelEventResponse.ProtoReflect.Descriptor instead.
func (*CancelEventResponse) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{11}
}

func (x *CancelEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetPendingEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit       int32     `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	PageToken   string    `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	TopicName   string    `protobuf:"bytes,3,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	EventType   string    `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	MinPriority *Priority `protobuf:"varint,5,opt,name=min_priority,json=minPriority,proto3,enum=kafka.Priority,oneof" json:"min_priority,omitempty"`
}

func (x *GetPendingEventsRequest) Reset() {
	*x = GetPendingEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingEventsRequest) ProtoMessage() {}

func (x *GetPendingEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingEventsRequest.ProtoReflect.Descriptor instead.
func (*GetPendingEventsRequest) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{12}
}

func (x *GetPendingEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPendingEventsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetPendingEventsRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *GetPendingEventsRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *GetPendingEventsRequest) GetMinPriority() Priority {
	if x != nil && x.MinPriority != nil {
		return *x.MinPriority
	}
	return Priority_PRIORITY_UNSPECIFIED
}

type GetPendingEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelopes     []*KafkaEnvelope `protobuf:"bytes,1,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
	NextPageToken string           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalCnt      int64            `protobuf:"varint,3,opt,name=total_cnt,json=totalCnt,proto3" json:"total_cnt,omitempty"`
}

func (x *GetPendingEventsResponse) Reset() {
	*x = GetPendingEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafka_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingEventsResponse) ProtoMessage() {}

func (x *GetPendingEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingEventsResponse.ProtoReflect.Descriptor instead.
func (*GetPendingEventsResponse) Descriptor() ([]byte, []int) {
	return file_kafka_event_proto_rawDescGZIP(), []int{13}
}

func (x *GetPendingEventsResponse) GetEnvelopes() []*KafkaEnvelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

func (x *GetPendingEventsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GetPendingEventsResponse) GetTotalCnt() int64 {
	if x != nil {
		return x.TotalCnt
	}
	return 0
}

var File_kafka_event_proto protoreflect.FileDescriptor

var file_kafka_event_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x0d,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0x91,
	0x07, 0x0a, 0x0d, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x48,
	0x0a, 0x16, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x14, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x46, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x52, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x13, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x16, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x34, 0x0a, 0x17, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x5d, 0x0a, 0x10, 0x46, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0x2d,
	0x0a, 0x11, 0x46, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x63, 0x0a,
	0x16, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x2f, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0xd6, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74,
	0x2a, 0x43, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x4f, 0x57, 0x10, 0x03, 0x2a, 0x3c, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x55, 0x53, 0x48, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x55, 0x4c,
	0x4c, 0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02,
	0x2a, 0x80, 0x01, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x45, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x05, 0x32, 0xdb, 0x03, 0x0a, 0x11, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x10, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x46, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1e, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x2c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x6f, 0x6e, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x42, 0x0f, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kafka_event_proto_rawDescOnce sync.Once
	file_kafka_event_proto_rawDescData = file_kafka_event_proto_rawDesc
)

func file_kafka_event_proto_rawDescGZIP() []byte {
	file_kafka_event_proto_rawDescOnce.Do(func() {
		file_kafka_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_kafka_event_proto_rawDescData)
	})
	return file_kafka_event_proto_rawDescData
}

var file_kafka_event_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_kafka_event_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_kafka_event_proto_goTypes = []interface{}{
	(Priority)(0),                    // 0: kafka.Priority
	(DeliveryMode)(0),                // 1: kafka.DeliveryMode
	(TriggerMode)(0),                 // 2: kafka.TriggerMode
	(EventStatus)(0),                 // 3: kafka.EventStatus
	(*FailureDetail)(nil),            // 4: kafka.FailureDetail
	(*KafkaEnvelope)(nil),            // 5: kafka.KafkaEnvelope
	(*SubmitEventRequest)(nil),       // 6: kafka.SubmitEventRequest
	(*SubmitEventResponse)(nil),      // 7: kafka.SubmitEventResponse
	(*AcknowledgeEventRequest)(nil),  // 8: kafka.AcknowledgeEventRequest
	(*AcknowledgeEventResponse)(nil), // 9: kafka.AcknowledgeEventResponse
	(*FailEventRequest)(nil),         // 10: kafka.FailEventRequest
	(*FailEventResponse)(nil),        // 11: kafka.FailEventResponse
	(*MarkFinalFailedRequest)(nil),   // 12: kafka.MarkFinalFailedRequest
	(*MarkFinalFailedResponse)(nil),  // 13: kafka.MarkFinalFailedResponse
	(*CancelEventRequest)(nil),       // 14: kafka.CancelEventRequest
	(*CancelEventResponse)(nil),      // 15: kafka.CancelEventResponse
	(*GetPendingEventsRequest)(nil),  // 16: kafka.GetPendingEventsRequest
	(*GetPendingEventsResponse)(nil), // 17: kafka.GetPendingEventsResponse
	nil,                              // 18: kafka.KafkaEnvelope.HeadersEntry
	(*timestamppb.Timestamp)(nil),    // 19: google.protobuf.Timestamp
}
var file_kafka_event_proto_depIdxs = []int32{
	19, // 0: kafka.FailureDetail.occurred_at:type_name -> google.protobuf.Timestamp
	0,  // 1: kafka.KafkaEnvelope.priority:type_name -> kafka.Priority
	1,  // 2: kafka.KafkaEnvelope.delivery_mode:type_name -> kafka.DeliveryMode
	2,  // 3: kafka.KafkaEnvelope.trigger_mode_requested:type_name -> kafka.TriggerMode
	2,  // 4: kafka.KafkaEnvelope.trigger_mode_effective:type_name -> kafka.TriggerMode
	3,  // 5: kafka.KafkaEnvelope.status:type_name -> kafka.EventStatus
	18, // 6: kafka.KafkaEnvelope.headers:type_name -> kafka.KafkaEnvelope.HeadersEntry
	19, // 7: kafka.KafkaEnvelope.created_at:type_name -> google.protobuf.Timestamp
	19, // 8: kafka.KafkaEnvelope.processed_at:type_name -> google.protobuf.Timestamp
	5,  // 9: kafka.SubmitEventRequest.envelope:type_name -> kafka.KafkaEnvelope
	3,  // 10: kafka.SubmitEventResponse.status:type_name -> kafka.EventStatus
	2,  // 11: kafka.SubmitEventResponse.trigger_mode_effective:type_name -> kafka.TriggerMode
	4,  // 12: kafka.FailEventRequest.failure:type_name -> kafka.FailureDetail
	4,  // 13: kafka.MarkFinalFailedRequest.failure:type_name -> kafka.FailureDetail
	19, // 14: kafka.CancelEventRequest.cancelled_at:type_name -> google.protobuf.Timestamp
	0,  // 15: kafka.GetPendingEventsRequest.min_priority:type_name -> kafka.Priority
	5,  // 16: kafka.GetPendingEventsResponse.envelopes:type_name -> kafka.KafkaEnvelope
	6,  // 17: kafka.KafkaEventService.SubmitEvent:input_type -> kafka.SubmitEventRequest
	8,  // 18: kafka.KafkaEventService.AcknowledgeEvent:input_type -> kafka.AcknowledgeEventRequest
	10, // 19: kafka.KafkaEventService.FailEvent:input_type -> kafka.FailEventRequest
	12, // 20: kafka.KafkaEventService.MarkFinalFailed:input_type -> kafka.MarkFinalFailedRequest
	14, // 21: kafka.KafkaEventService.CancelEvent:input_type -> kafka.CancelEventRequest
	16, // 22: kafka.KafkaEventService.GetPendingEvents:input_type -> kafka.GetPendingEventsRequest
	7,  // 23: kafka.KafkaEventService.SubmitEvent:output_type -> kafka.SubmitEventResponse
	9,  // 24: kafka.KafkaEventService.AcknowledgeEvent:output_type -> kafka.AcknowledgeEventResponse
	11, // 25: kafka.KafkaEventService.FailEvent:output_type -> kafka.FailEventResponse
	13, // 26: kafka.KafkaEventService.MarkFinalFailed:output_type -> kafka.MarkFinalFailedResponse
	15, // 27: kafka.KafkaEventService.CancelEvent:output_type -> kafka.CancelEventResponse
	17, // 28: kafka.KafkaEventService.GetPendingEvents:output_type -> kafka.GetPendingEventsResponse
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_kafka_event_proto_init() }
func file_kafka_event_proto_init() {
	if File_kafka_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kafka_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkFinalFailedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkFinalFailedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafka_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kafka_event_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kafka_event_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kafka_event_proto_goTypes,
		DependencyIndexes: file_kafka_event_proto_depIdxs,
		EnumInfos:         file_kafka_event_proto_enumTypes,
		MessageInfos:      file_kafka_event_proto_msgTypes,
	}.Build()
	File_kafka_event_proto = out.File
	file_kafka_event_proto_rawDesc = nil
	file_kafka_event_proto_goTypes = nil
	file_kafka_event_proto_depIdxs = nil
}

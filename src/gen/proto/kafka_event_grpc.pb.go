// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: kafka_event.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KafkaEventServiceClient is the client API for KafkaEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafkaEventServiceClient interface {
	SubmitEvent(ctx context.Context, in *SubmitEventRequest, opts ...grpc.CallOption) (*SubmitEventResponse, error)
	AcknowledgeEvent(ctx context.Context, in *AcknowledgeEventRequest, opts ...grpc.CallOption) (*AcknowledgeEventResponse, error)
	FailEvent(ctx context.Context, in *FailEventRequest, opts ...grpc.CallOption) (*FailEventResponse, error)
	MarkFinalFailed(ctx context.Context, in *MarkFinalFailedRequest, opts ...grpc.CallOption) (*MarkFinalFailedResponse, error)
	CancelEvent(ctx context.Context, in *CancelEventRequest, opts ...grpc.CallOption) (*CancelEventResponse, error)
	GetPendingEvents(ctx context.Context, in *GetPendingEventsRequest, opts ...grpc.CallOption) (*GetPendingEventsResponse, error)
}

type kafkaEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaEventServiceClient(cc grpc.ClientConnInterface) KafkaEventServiceClient {
	return &kafkaEventServiceClient{cc}
}

func (c *kafkaEventServiceClient) SubmitEvent(ctx context.Context, in *SubmitEventRequest, opts ...grpc.CallOption) (*SubmitEventResponse, error) {
	out := new(SubmitEventResponse)
	err := c.cc.Invoke(ctx, "/kafka.KafkaEventService/SubmitEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaEventServiceClient) AcknowledgeEvent(ctx context.Context, in *AcknowledgeEventRequest, opts ...grpc.CallOption) (*AcknowledgeEventResponse, error) {
	out := new(AcknowledgeEventResponse)
	err := c.cc.Invoke(ctx, "/kafka.KafkaEventService/AcknowledgeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaEventServiceClient) FailEvent(ctx context.Context, in *FailEventRequest, opts ...grpc.CallOption) (*FailEventResponse, error) {
	out := new(FailEventResponse)
	err := c.cc.Invoke(ctx, "/kafka.KafkaEventService/FailEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaEventServiceClient) MarkFinalFailed(ctx context.Context, in *MarkFinalFailedRequest, opts ...grpc.CallOption) (*MarkFinalFailedResponse, error) {
	out := new(MarkFinalFailedResponse)
	err := c.cc.Invoke(ctx, "/kafka.KafkaEventService/MarkFinalFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaEventServiceClient) CancelEvent(ctx context.Context, in *CancelEventRequest, opts ...grpc.CallOption) (*CancelEventResponse, error) {
	out := new(CancelEventResponse)
	err := c.cc.Invoke(ctx, "/kafka.KafkaEventService/CancelEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaEventServiceClient) GetPendingEvents(ctx context.Context, in *GetPendingEventsRequest, opts ...grpc.CallOption) (*GetPendingEventsResponse, error) {
	out := new(GetPendingEventsResponse)
	err := c.cc.Invoke(ctx, "/kafka.KafkaEventService/GetPendingEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaEventServiceServer is the server API for KafkaEventService service.
// All implementations should embed UnimplementedKafkaEventServiceServer
// for forward compatibility
type KafkaEventServiceServer interface {
	SubmitEvent(context.Context, *SubmitEventRequest) (*SubmitEventResponse, error)
	AcknowledgeEvent(context.Context, *AcknowledgeEventRequest) (*AcknowledgeEventResponse, error)
	FailEvent(context.Context, *FailEventRequest) (*FailEventResponse, error)
	MarkFinalFailed(context.Context, *MarkFinalFailedRequest) (*MarkFinalFailedResponse, error)
	CancelEvent(context.Context, *CancelEventRequest) (*CancelEventResponse, error)
	GetPendingEvents(context.Context, *GetPendingEventsRequest) (*GetPendingEventsResponse, error)
}

// UnimplementedKafkaEventServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKafkaEventServiceServer struct {
}

func (UnimplementedKafkaEventServiceServer) SubmitEvent(context.Context, *SubmitEventRequest) (*SubmitEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitEvent not implemented")
}
func (UnimplementedKafkaEventServiceServer) AcknowledgeEvent(context.Context, *AcknowledgeEventRequest) (*AcknowledgeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeEvent not implemented")
}
func (UnimplementedKafkaEventServiceServer) FailEvent(context.Context, *FailEventRequest) (*FailEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailEvent not implemented")
}
func (UnimplementedKafkaEventServiceServer) MarkFinalFailed(context.Context, *MarkFinalFailedRequest) (*MarkFinalFailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkFinalFailed not implemented")
}
func (UnimplementedKafkaEventServiceServer) CancelEvent(context.Context, *CancelEventRequest) (*CancelEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelEvent not implemented")
}
func (UnimplementedKafkaEventServiceServer) GetPendingEvents(context.Context, *GetPendingEventsRequest) (*GetPendingEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingEvents not implemented")
}

// UnsafeKafkaEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafkaEventServiceServer will
// result in compilation errors.
type UnsafeKafkaEventServiceServer interface {
	mustEmbedUnimplementedKafkaEventServiceServer()
}

func RegisterKafkaEventServiceServer(s grpc.ServiceRegistrar, srv KafkaEventServiceServer) {
	s.RegisterService(&KafkaEventService_ServiceDesc, srv)
}

func _KafkaEventService_SubmitEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaEventServiceServer).SubmitEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.KafkaEventService/SubmitEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaEventServiceServer).SubmitEvent(ctx, req.(*SubmitEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaEventService_AcknowledgeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaEventServiceServer).AcknowledgeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.KafkaEventService/AcknowledgeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaEventServiceServer).AcknowledgeEvent(ctx, req.(*AcknowledgeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaEventService_FailEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaEventServiceServer).FailEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.KafkaEventService/FailEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaEventServiceServer).FailEvent(ctx, req.(*FailEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaEventService_MarkFinalFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkFinalFailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaEventServiceServer).MarkFinalFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.KafkaEventService/MarkFinalFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaEventServiceServer).MarkFinalFailed(ctx, req.(*MarkFinalFailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaEventService_CancelEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaEventServiceServer).CancelEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.KafkaEventService/CancelEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaEventServiceServer).CancelEvent(ctx, req.(*CancelEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaEventService_GetPendingEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaEventServiceServer).GetPendingEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.KafkaEventService/GetPendingEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaEventServiceServer).GetPendingEvents(ctx, req.(*GetPendingEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KafkaEventService_ServiceDesc is the grpc.ServiceDesc for KafkaEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KafkaEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kafka.KafkaEventService",
	HandlerType: (*KafkaEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitEvent",
			Handler:    _KafkaEventService_SubmitEvent_Handler,
		},
		{
			MethodName: "AcknowledgeEvent",
			Handler:    _KafkaEventService_AcknowledgeEvent_Handler,
		},
		{
			MethodName: "FailEvent",
			Handler:    _KafkaEventService_FailEvent_Handler,
		},
		{
			MethodName: "MarkFinalFailed",
			Handler:    _KafkaEventService_MarkFinalFailed_Handler,
		},
		{
			MethodName: "CancelEvent",
			Handler:    _KafkaEventService_CancelEvent_Handler,
		},
		{
			MethodName: "GetPendingEvents",
			Handler:    _KafkaEventService_GetPendingEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kafka_event.proto",
}

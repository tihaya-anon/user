// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: auth_session.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthSessionServiceClient is the client API for AuthSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthSessionServiceClient interface {
	CreateAuthSession(ctx context.Context, in *CreateAuthSessionRequest, opts ...grpc.CallOption) (*CreateAuthSessionResponse, error)
	GetUserSessions(ctx context.Context, in *GetUserSessionsRequest, opts ...grpc.CallOption) (*GetUserSessionsResponse, error)
	InvalidateSession(ctx context.Context, in *InvalidateSessionRequest, opts ...grpc.CallOption) (*InvalidateSessionResponse, error)
}

type authSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthSessionServiceClient(cc grpc.ClientConnInterface) AuthSessionServiceClient {
	return &authSessionServiceClient{cc}
}

func (c *authSessionServiceClient) CreateAuthSession(ctx context.Context, in *CreateAuthSessionRequest, opts ...grpc.CallOption) (*CreateAuthSessionResponse, error) {
	out := new(CreateAuthSessionResponse)
	err := c.cc.Invoke(ctx, "/auth_session.AuthSessionService/CreateAuthSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSessionServiceClient) GetUserSessions(ctx context.Context, in *GetUserSessionsRequest, opts ...grpc.CallOption) (*GetUserSessionsResponse, error) {
	out := new(GetUserSessionsResponse)
	err := c.cc.Invoke(ctx, "/auth_session.AuthSessionService/GetUserSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSessionServiceClient) InvalidateSession(ctx context.Context, in *InvalidateSessionRequest, opts ...grpc.CallOption) (*InvalidateSessionResponse, error) {
	out := new(InvalidateSessionResponse)
	err := c.cc.Invoke(ctx, "/auth_session.AuthSessionService/InvalidateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthSessionServiceServer is the server API for AuthSessionService service.
// All implementations should embed UnimplementedAuthSessionServiceServer
// for forward compatibility
type AuthSessionServiceServer interface {
	CreateAuthSession(context.Context, *CreateAuthSessionRequest) (*CreateAuthSessionResponse, error)
	GetUserSessions(context.Context, *GetUserSessionsRequest) (*GetUserSessionsResponse, error)
	InvalidateSession(context.Context, *InvalidateSessionRequest) (*InvalidateSessionResponse, error)
}

// UnimplementedAuthSessionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthSessionServiceServer struct {
}

func (UnimplementedAuthSessionServiceServer) CreateAuthSession(context.Context, *CreateAuthSessionRequest) (*CreateAuthSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthSession not implemented")
}
func (UnimplementedAuthSessionServiceServer) GetUserSessions(context.Context, *GetUserSessionsRequest) (*GetUserSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSessions not implemented")
}
func (UnimplementedAuthSessionServiceServer) InvalidateSession(context.Context, *InvalidateSessionRequest) (*InvalidateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateSession not implemented")
}

// UnsafeAuthSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthSessionServiceServer will
// result in compilation errors.
type UnsafeAuthSessionServiceServer interface {
	mustEmbedUnimplementedAuthSessionServiceServer()
}

func RegisterAuthSessionServiceServer(s grpc.ServiceRegistrar, srv AuthSessionServiceServer) {
	s.RegisterService(&AuthSessionService_ServiceDesc, srv)
}

func _AuthSessionService_CreateAuthSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSessionServiceServer).CreateAuthSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_session.AuthSessionService/CreateAuthSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSessionServiceServer).CreateAuthSession(ctx, req.(*CreateAuthSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSessionService_GetUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSessionServiceServer).GetUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_session.AuthSessionService/GetUserSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSessionServiceServer).GetUserSessions(ctx, req.(*GetUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSessionService_InvalidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSessionServiceServer).InvalidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_session.AuthSessionService/InvalidateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSessionServiceServer).InvalidateSession(ctx, req.(*InvalidateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthSessionService_ServiceDesc is the grpc.ServiceDesc for AuthSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_session.AuthSessionService",
	HandlerType: (*AuthSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthSession",
			Handler:    _AuthSessionService_CreateAuthSession_Handler,
		},
		{
			MethodName: "GetUserSessions",
			Handler:    _AuthSessionService_GetUserSessions_Handler,
		},
		{
			MethodName: "InvalidateSession",
			Handler:    _AuthSessionService_InvalidateSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_session.proto",
}

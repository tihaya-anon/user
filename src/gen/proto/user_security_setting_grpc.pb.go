// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: user_security_setting.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserSecuritySettingServiceClient is the client API for UserSecuritySettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSecuritySettingServiceClient interface {
	GetUserSecuritySetting(ctx context.Context, in *GetUserSecuritySettingRequest, opts ...grpc.CallOption) (*GetUserSecuritySettingResponse, error)
	UpdateUserSecuritySetting(ctx context.Context, in *UpdateUserSecuritySettingRequest, opts ...grpc.CallOption) (*UpdateUserSecuritySettingResponse, error)
	CreateUserSecuritySetting(ctx context.Context, in *CreateUserSecuritySettingRequest, opts ...grpc.CallOption) (*CreateUserSecuritySettingResponse, error)
}

type userSecuritySettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSecuritySettingServiceClient(cc grpc.ClientConnInterface) UserSecuritySettingServiceClient {
	return &userSecuritySettingServiceClient{cc}
}

func (c *userSecuritySettingServiceClient) GetUserSecuritySetting(ctx context.Context, in *GetUserSecuritySettingRequest, opts ...grpc.CallOption) (*GetUserSecuritySettingResponse, error) {
	out := new(GetUserSecuritySettingResponse)
	err := c.cc.Invoke(ctx, "/user_security.UserSecuritySettingService/GetUserSecuritySetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSecuritySettingServiceClient) UpdateUserSecuritySetting(ctx context.Context, in *UpdateUserSecuritySettingRequest, opts ...grpc.CallOption) (*UpdateUserSecuritySettingResponse, error) {
	out := new(UpdateUserSecuritySettingResponse)
	err := c.cc.Invoke(ctx, "/user_security.UserSecuritySettingService/UpdateUserSecuritySetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSecuritySettingServiceClient) CreateUserSecuritySetting(ctx context.Context, in *CreateUserSecuritySettingRequest, opts ...grpc.CallOption) (*CreateUserSecuritySettingResponse, error) {
	out := new(CreateUserSecuritySettingResponse)
	err := c.cc.Invoke(ctx, "/user_security.UserSecuritySettingService/CreateUserSecuritySetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSecuritySettingServiceServer is the server API for UserSecuritySettingService service.
// All implementations should embed UnimplementedUserSecuritySettingServiceServer
// for forward compatibility
type UserSecuritySettingServiceServer interface {
	GetUserSecuritySetting(context.Context, *GetUserSecuritySettingRequest) (*GetUserSecuritySettingResponse, error)
	UpdateUserSecuritySetting(context.Context, *UpdateUserSecuritySettingRequest) (*UpdateUserSecuritySettingResponse, error)
	CreateUserSecuritySetting(context.Context, *CreateUserSecuritySettingRequest) (*CreateUserSecuritySettingResponse, error)
}

// UnimplementedUserSecuritySettingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserSecuritySettingServiceServer struct {
}

func (UnimplementedUserSecuritySettingServiceServer) GetUserSecuritySetting(context.Context, *GetUserSecuritySettingRequest) (*GetUserSecuritySettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSecuritySetting not implemented")
}
func (UnimplementedUserSecuritySettingServiceServer) UpdateUserSecuritySetting(context.Context, *UpdateUserSecuritySettingRequest) (*UpdateUserSecuritySettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSecuritySetting not implemented")
}
func (UnimplementedUserSecuritySettingServiceServer) CreateUserSecuritySetting(context.Context, *CreateUserSecuritySettingRequest) (*CreateUserSecuritySettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSecuritySetting not implemented")
}

// UnsafeUserSecuritySettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSecuritySettingServiceServer will
// result in compilation errors.
type UnsafeUserSecuritySettingServiceServer interface {
	mustEmbedUnimplementedUserSecuritySettingServiceServer()
}

func RegisterUserSecuritySettingServiceServer(s grpc.ServiceRegistrar, srv UserSecuritySettingServiceServer) {
	s.RegisterService(&UserSecuritySettingService_ServiceDesc, srv)
}

func _UserSecuritySettingService_GetUserSecuritySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSecuritySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecuritySettingServiceServer).GetUserSecuritySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_security.UserSecuritySettingService/GetUserSecuritySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecuritySettingServiceServer).GetUserSecuritySetting(ctx, req.(*GetUserSecuritySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSecuritySettingService_UpdateUserSecuritySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSecuritySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecuritySettingServiceServer).UpdateUserSecuritySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_security.UserSecuritySettingService/UpdateUserSecuritySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecuritySettingServiceServer).UpdateUserSecuritySetting(ctx, req.(*UpdateUserSecuritySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSecuritySettingService_CreateUserSecuritySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSecuritySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecuritySettingServiceServer).CreateUserSecuritySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_security.UserSecuritySettingService/CreateUserSecuritySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecuritySettingServiceServer).CreateUserSecuritySetting(ctx, req.(*CreateUserSecuritySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSecuritySettingService_ServiceDesc is the grpc.ServiceDesc for UserSecuritySettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSecuritySettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_security.UserSecuritySettingService",
	HandlerType: (*UserSecuritySettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserSecuritySetting",
			Handler:    _UserSecuritySettingService_GetUserSecuritySetting_Handler,
		},
		{
			MethodName: "UpdateUserSecuritySetting",
			Handler:    _UserSecuritySettingService_UpdateUserSecuritySetting_Handler,
		},
		{
			MethodName: "CreateUserSecuritySetting",
			Handler:    _UserSecuritySettingService_CreateUserSecuritySetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_security_setting.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: auth_credential.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthCredentialServiceClient is the client API for AuthCredentialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthCredentialServiceClient interface {
	AddAuthCredential(ctx context.Context, in *AddAuthCredentialRequest, opts ...grpc.CallOption) (*AddAuthCredentialResponse, error)
	GetAuthCredentials(ctx context.Context, in *GetAuthCredentialsRequest, opts ...grpc.CallOption) (*GetAuthCredentialsResponse, error)
}

type authCredentialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthCredentialServiceClient(cc grpc.ClientConnInterface) AuthCredentialServiceClient {
	return &authCredentialServiceClient{cc}
}

func (c *authCredentialServiceClient) AddAuthCredential(ctx context.Context, in *AddAuthCredentialRequest, opts ...grpc.CallOption) (*AddAuthCredentialResponse, error) {
	out := new(AddAuthCredentialResponse)
	err := c.cc.Invoke(ctx, "/auth_credential.AuthCredentialService/AddAuthCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authCredentialServiceClient) GetAuthCredentials(ctx context.Context, in *GetAuthCredentialsRequest, opts ...grpc.CallOption) (*GetAuthCredentialsResponse, error) {
	out := new(GetAuthCredentialsResponse)
	err := c.cc.Invoke(ctx, "/auth_credential.AuthCredentialService/GetAuthCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthCredentialServiceServer is the server API for AuthCredentialService service.
// All implementations should embed UnimplementedAuthCredentialServiceServer
// for forward compatibility
type AuthCredentialServiceServer interface {
	AddAuthCredential(context.Context, *AddAuthCredentialRequest) (*AddAuthCredentialResponse, error)
	GetAuthCredentials(context.Context, *GetAuthCredentialsRequest) (*GetAuthCredentialsResponse, error)
}

// UnimplementedAuthCredentialServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthCredentialServiceServer struct {
}

func (UnimplementedAuthCredentialServiceServer) AddAuthCredential(context.Context, *AddAuthCredentialRequest) (*AddAuthCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthCredential not implemented")
}
func (UnimplementedAuthCredentialServiceServer) GetAuthCredentials(context.Context, *GetAuthCredentialsRequest) (*GetAuthCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthCredentials not implemented")
}

// UnsafeAuthCredentialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthCredentialServiceServer will
// result in compilation errors.
type UnsafeAuthCredentialServiceServer interface {
	mustEmbedUnimplementedAuthCredentialServiceServer()
}

func RegisterAuthCredentialServiceServer(s grpc.ServiceRegistrar, srv AuthCredentialServiceServer) {
	s.RegisterService(&AuthCredentialService_ServiceDesc, srv)
}

func _AuthCredentialService_AddAuthCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAuthCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCredentialServiceServer).AddAuthCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_credential.AuthCredentialService/AddAuthCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCredentialServiceServer).AddAuthCredential(ctx, req.(*AddAuthCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthCredentialService_GetAuthCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCredentialServiceServer).GetAuthCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_credential.AuthCredentialService/GetAuthCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCredentialServiceServer).GetAuthCredentials(ctx, req.(*GetAuthCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthCredentialService_ServiceDesc is the grpc.ServiceDesc for AuthCredentialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthCredentialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_credential.AuthCredentialService",
	HandlerType: (*AuthCredentialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAuthCredential",
			Handler:    _AuthCredentialService_AddAuthCredential_Handler,
		},
		{
			MethodName: "GetAuthCredentials",
			Handler:    _AuthCredentialService_GetAuthCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_credential.proto",
}
